# –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import os, sys, json, threading, time
# –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –í–Ω–µ—à–Ω–∏–µ –º–æ–¥—É–ª–∏
import numpy as np
import cv2

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
from common.Config import Config
from common.Logger import config_logger
from common.Redis import get_redis_client

from Aruco import Aruco

logger = config_logger("cv-service/Calibrator.py")
redis_client = get_redis_client()

REDIS_CAMERA_FRAME_KEY = os.getenv("REDIS_CAMERA_FRAME_KEY", "camera_frame")
REDIS_PROCESSED_FRAME_KEY = os.getenv(
    "REDIS_PROCESSED_FRAME_KEY", "processed_frame")


class Calibrator:

    def __init__(self):
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä–∞")
        self.__load_calibration_data()

    def __load_calibration_data(self):
        self.Calibrated = Config.get("CalibrationData.Calibrated", "null")
        self.Calibrated = json.loads(Config.get(
            "CalibrationData.Calibrated", "null"))
        theta = Config.get("CalibrationData.Theta", "null")
        self.Theta = np.array(json.loads(theta)) if theta != "null" else None
        origin = Config.get("CalibrationData.Origin", "null")
        self.Origin = np.array(json.loads(
            origin)) if origin != "null" else None
        size = Config.get("CalibrationData.Size", "null")
        self.Size = np.array(json.loads(size)) if size != "null" else None
        rst = Config.get("CalibrationData.RST", "null")
        self.RST = np.array(json.loads(rst)) if rst != "null" else None
        self.ScaleX = Config.get("CalibrationData.ScaleX", "null")
        self.ScaleY = Config.get("CalibrationData.ScaleY", "null")

    def __save_calibration_data(self):
        Config.set(
            "CalibrationData.Calibrated",
            json.dumps(
                self.Calibrated if self.Calibrated is not None else None),
        )
        Config.set(
            "CalibrationData.Theta",
            json.dumps(self.Theta.tolist()
                       if self.Theta is not None else None),
        )
        Config.set(
            "CalibrationData.Origin",
            json.dumps(self.Origin.tolist()
                       if self.Origin is not None else None),
        )
        Config.set(
            "CalibrationData.Size",
            json.dumps(self.Size.tolist() if self.Size is not None else None),
        )
        Config.set(
            "CalibrationData.RST",
            json.dumps(self.RST.tolist() if self.RST is not None else None),
        )
        Config.set("CalibrationData.ScaleX", float(self.ScaleX) if self.ScaleX is not None else None)
        Config.set("CalibrationData.ScaleY", float(self.ScaleY) if self.ScaleY is not None else None)
        Config.save()

    def uncalibrate(self):
        self.Calibrated = False
        self.Theta = None
        self.Origin = None
        self.Size = None
        self.RST = None
        self.ScaleX = None
        self.ScaleY = None
        self.__save_calibration_data()

    def calibrate(self, markers):

        if markers and len(markers) < 4:
            logger.warning(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤ ArUco –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 4)"
            )
            return False

        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            marker00_id = Config.get("Markers.Marker00ID")
            marker00_point = Config.get("Markers.Marker00Point")
            markerx0_id = Config.get("Markers.MarkerX0ID")
            markerx0_point = Config.get("Markers.MarkerX0Point")
            markerxy_id = Config.get("Markers.MarkerXYID")
            markerxy_point = Config.get("Markers.MarkerXYPoint")
            marker0y_id = Config.get("Markers.Marker0YID")
            marker0y_point = Config.get("Markers.Marker0YPoint")
            # –†–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏
            realDX = Config.get("Markers.MarkersXDistance")
            realDY = Config.get("Markers.MarkersYDistance")

            pp = np.float32(
                [
                    markers[marker00_id].corners[marker00_point],
                    markers[markerx0_id].corners[markerx0_point],
                    markers[markerxy_id].corners[markerxy_point],
                    markers[marker0y_id].corners[marker0y_point],
                ]
            )

            self.Size = np.array(
                [
                    np.ceil(np.linalg.norm(pp[1] - pp[0])),
                    np.ceil(np.linalg.norm(pp[3] - pp[0])),
                ]
            )

            # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞)
            T = np.array(pp[0])
            self.Origin = T

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø–æ–≤–æ—Ä–æ—Ç–∞
            self.Theta = np.arctan2(pp[1][1] - pp[0][1], pp[1][0] - pp[0][0])
            R = np.array(
                [
                    [np.cos(self.Theta), -np.sin(self.Theta)],
                    [np.sin(self.Theta), np.cos(self.Theta)],
                ]
            )

            # –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
            RT = np.eye(3)
            RT[:2, :2] = R.T
            RT[:2, 2] = -R.T @ T

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            scale_x = realDX / np.linalg.norm(pp[1] - pp[0])
            scale_y = realDY / np.linalg.norm(pp[3] - pp[0])

            # –ú–∞—Ç—Ä–∏—Ü–∞ –º–∞—Å—à—Ç–∞–±–∞
            S = np.eye(3)
            S[0, 0] = scale_x
            S[1, 1] = scale_y
            self.ScaleX = scale_x
            self.ScaleY = scale_y

            # –û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            RST = S @ RT
            # np.save(os.path.join(MAT_DIR, "calibration_matrix.npy"), RST)
            logger.info(
                f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

            self.RST = RST
            self.Calibrated = True
            self.__save_calibration_data()

            logger.info(
                f"\nüìê –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏:\n"
                f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–ö–∞–ª–∏–±—Ä–æ–≤–∞–Ω–æ' if self.Calibrated else '–ù–µ –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–æ'}\n"
                f"   üîÑ –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ (Theta): {np.degrees(self.Theta):.2f}¬∞\n"
                f"   üéØ –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ (Origin): ({self.Origin[0]:.2f}, {self.Origin[1]:.2f})\n"
                f"   üìè –†–∞–∑–º–µ—Ä—ã (Size): —à–∏—Ä–∏–Ω–∞={self.Size[0]:.2f}, –≤—ã—Å–æ—Ç–∞={self.Size[1]:.2f}\n"
                f"   üßÆ –ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (RST):\n{np.array2string(self.RST, precision=4, suppress_small=True)}"
                f"   üìä –ú–∞—Å—à—Ç–∞–±—ã (ScaleX, ScaleY): {self.ScaleX:.2f}, {self.ScaleY:.2f}\n"
            )

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ: {e}")
            return False


if __name__ == "__main__":
    from Aruco import Aruco

    aruco = Aruco()
    cv2.namedWindow("Frame", cv2.WINDOW_FREERATIO)
    calibrator = Calibrator()

    while True:

        frame_data = redis_client.get(REDIS_CAMERA_FRAME_KEY)
        if frame_data:
            np_arr = np.frombuffer(frame_data, np.uint8)
            img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        markers = aruco.detectMarkers(gray)

        if markers and len(markers) > 0:
            logger.debug(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(markers)} –º–∞—Ä–∫–µ—Äa(–æ–≤) ArUco")
            for id, marker in markers.items():
                cv2.drawMarker(img, marker.center, (255, 0, 0),
                               cv2.MARKER_CROSS, 5, 8)
                cv2.putText(
                    img,
                    f"ID: {id}",
                    (marker.center[0] + 10, marker.center[1]),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    0.5,
                    (255, 0, 0),
                    2,
                )
                cv2.polylines(
                    img,
                    [
                        np.array(
                            [
                                marker.topLeft,
                                marker.topRight,
                                marker.bottomRight,
                                marker.bottomLeft,
                            ],
                            dtype=np.int32,
                        )
                    ],
                    isClosed=True,
                    color=(0, 255, 0),
                    thickness=2,
                )

        if not calibrator.Calibrated:
            cv2.putText(
                img,
                "Not Calibrated",
                (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX,
                1,
                (0, 0, 255),
                20,
            )
        else:
            cv2.putText(
                img,
                f"Calibrated: Theta={np.degrees(calibrator.Theta):.2f}, Origin=({int(calibrator.Origin[0])},{int(calibrator.Origin[1])}), Size=({int(calibrator.Size[0])},{int(calibrator.Size[1])})",
                (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX,
                0.7,
                (0, 255, 0),
                20,
            )

        cv2.imshow("Frame", img)
        key = cv2.waitKey(1) & 0xFF

        if key == ord("c"):
            logger.info("–ó–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏...")
            if calibrator.calibrate(markers):
                logger.info("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
